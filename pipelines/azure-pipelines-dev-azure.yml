# Node.js with React
# Build a Node.js project that uses React.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
  - temp # change to your branch

variables:
  containerRegistryConection: 'app-nonprd-registry' # e.g ACR-project
  imageName: 'incentive-ventures' # e.g project-fe
  containerImageRepository: 'kubenonprdacr.azurecr.io/$(imageName)' # e.g project.azurecr.io/imageName
  environment: 'dev' # e.g development
  pool: 'Azure pipelines' # e.g PROJECT-NONPRD-POOL
  secretScriptFile: 'updateK8manifest-be.sh'

# CI
stages:
  - stage: Build
    displayName: Build stage
    condition: succeeded()
    jobs:
      - job: Build
        displayName: Build
        pool:
          name: 'ubuntu-latest' # updateK8manifest can't use ssh with azure pipeline

        steps:
          - script: |
              echo $sourceVersion
              commitHash=${sourceVersion:0:8}
              echo $commitHash
              echo "##vso[task.setvariable variable=commitHash]$commitHash"
            env: { sourceVersion: $(Build.SourceVersion) }
            displayName: Git Hash 8-digit

          - task: Docker@2
            displayName: build
            inputs:
              containerRegistry: '$(containerRegistryConection)'
              repository: '$(imageName)'
              command: 'build'
              Dockerfile: '**/Dockerfile'
              tags: |
                dev-latest
                dev-$(Build.SourceVersion)

          - task: Docker@2
            displayName: push
            inputs:
              containerRegistry: '$(containerRegistryConection)'
              repository: '$(imageName)'
              command: 'push'
              tags: dev-latest

          - task: Docker@2
            displayName: push
            inputs:
              containerRegistry: '$(containerRegistryConection)'
              repository: '$(imageName)'
              command: 'push'
              tags: dev-$(Build.SourceVersion)

          - task: DownloadSecureFile@1
            name: secret
            displayName: 'Download secure file (updatedK8sManifest.sh)'
            inputs:
              secureFile: '$(secretScriptFile)'

          - task: PowerShell@2
            displayName: 'Copy Files secret to: $(build.artifactstagingdirectory)'
            inputs:
              targetType: inline
              script: Copy-Item -Path "$(Agent.TempDirectory)/$(secretScriptFile)" -Destination "$(build.artifactstagingdirectory)/$(secretScriptFile)"

          - task: PublishBuildArtifacts@1
            displayName: 'Publish Artifact: drop'

  - stage: Update
    displayName: Update stage
    jobs:
      - job: Update
        displayName: Update
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: DownloadBuildArtifacts@0
            displayName: 'Download Artifacts'
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'drop'
              downloadPath: '$(System.DefaultWorkingDirectory)'
              cleanDestinationFolder: true

          - task: ShellScript@2
            inputs:
              scriptPath: '$(System.DefaultWorkingDirectory)/drop/$(secretScriptFile)'
              args: 'dev dev-$(Build.SourceVersion) $(containerImageRepository)'

