trigger:
  - uat # change to your branch

variables:
  containerRegistryConection: 'app-nonprd-registry'
  imageName: 'node-boilerplate'
  pool: 'GCP-NONPRD-POOL'
  environment: 'uat'
  GCP_PROJECT_ID: 'app-nonprod-project'
  GCP_REPO: 'app-nonprod-ar'
  containerImageRepository: 'asia-southeast1-docker.pkg.dev/$(GCP_PROJECT_ID)/$(GCP_REPO)/$(imageName)'
  updateK8sScriptFile: 'updateK8smanifest.sh'
  k8sManifestRepoUrl: 'git@ssh.dev.azure.com:v3/betagro-dev/nodejs-boilerplate/nodejs-boilerplate-manifest' # add your k8s  manifest repository here (SSH approach only)

# CI
stages:
  - stage: Build
    displayName: Build stage
    condition: succeeded()
    jobs:
      - job: Build
        displayName: Build
        pool:
          vmImage: 'ubuntu-latest'

        steps:
          - script: |
              echo $sourceVersion
              commitHash=${sourceVersion:0:8}
              echo $commitHash
              echo "##vso[task.setvariable variable=commitHash]$commitHash"
            env: { sourceVersion: $(Build.SourceVersion) }
            displayName: Git Hash 8-digit

          - task: Docker@2
            displayName: Login to QA ACR
            inputs:
              command: login
              containerRegistry: '$(containerRegistryConection)'

          - task: Bash@3
            displayName: Pulling docker image from QA ACR
            inputs:
              targetType: inline
              script: |
                docker pull $(containerImageRepository):qa-$(Build.SourceVersion)

          - task: Bash@3
            displayName: Retag the image and push
            inputs:
              targetType: inline
              script: |
                docker tag $(containerImageRepository):qa-$(Build.SourceVersion) $(containerImageRepository):uat-$(Build.SourceVersion)
                docker push $(containerImageRepository):uat-$(Build.SourceVersion)

          - task: PublishBuildArtifacts@1
            displayName: 'Publish Artifact: drop'

  #CD
  - stage: Update
    displayName: Update K8s Manifests
    dependsOn: Build
    condition: succeeded()
    jobs:
      - job: UpdateManifests
        displayName: Update K8s Manifests
        pool:
          name: $(pool)
        steps:
          - checkout: self
            displayName: 'Checkout source code'

          - task: Bash@3
            displayName: 'Update K8s Manifest'
            inputs:
              targetType: 'filePath'
              filePath: '$(System.DefaultWorkingDirectory)/$(updateK8sScriptFile)'
              arguments: '$(environment) $(environment)-$(Build.SourceVersion) $(containerImageRepository) $(k8sManifestRepoUrl)'
              workingDirectory: '$(System.DefaultWorkingDirectory)'
              # failOnStderr: true
            env:
              ENVIRONMENT: $(environment)
              IMAGE_TAG: $(environment)-$(Build.SourceVersion)
              CONTAINER_REGISTRY: $(containerImageRepository)
              K8S_MANIFEST_REPO: $(k8sManifestRepoUrl)

